//About this Schema:

// MasterItems:  are "prototype" Items. Are defined by id, name, img-url, default category and a boolean for "approved" for this item. When item is added by a customer, it will have false for approved as default value.
// Categories:   are definied by the id and Name. We can access MasterItems & Items used by user, as there is a relational connection to these.
// Items:        are items, which are used in Lists. Are definied by id, List they are found in, date they are created at (generated by prisma on default) & boolean for checked (false on default). Optopnal values are: quantity, unit, MasterItem & customCategory.
// Lists:        Lists. Are defined by id, date crteated at, the user they belong to, boolean for favorite (false on default) & Items linked to this list. Optional value is "New List"
// Users:        Users. Are defined by id, name, email & Lists that are related to this specific user.


//WORKFLOWS (to be done better and moved into Read-Me-file
//1. add Item to the List:
////pick id, start typing
////Input already in MasterItems: simply add Item to the list, add id as listIdentifier
////Input not in Category yet: add Item to MasterItems, add Item to list, add id as listIdentifier

//2. disply Lists for a specific user:
////Only ids that the user has acceess to are displayd.

//3. show List content:
////display all Items filtered by id.

//4. change Category:
//// take Item by ItemId, take targeted Category, store as custom Category

//5. delete List:
////delete all Items form Items linked id, delete List by id



generator client {
  provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())

  name            String
  email           String @unique
  lists           List[] //opposite relation one-to-many

  @@map("Users")
}

model List {
  id                  String @id @default(uuid())

  listName            String?    @default("new list")
  createdAt           DateTime   @default(now())

  userIdentifier      String //entering correct listIdentifier will Link to user
  belongsTo           User @relation(fields: [userIdentifier], references: [id])
  
  favorite            Boolean    @default(false)

  items               Item[] ///opposite relation to Items related to this List.

  @@map("Lists")
}

model Item {
  id                  String  @id @default(uuid())

  name                String
  createdAt           DateTime   @default(now())
  imageUrl            String?
  
  category            String?
  defaultCategory     Category? @relation(fields: [category], references: [name])

  quantity            Float?
  unit                String?

  //entering correct listIdentifier will Link to a list
  listIdentifier      String?
  inList              List?   @relation(fields: [listIdentifier], references: [id])
  
  checked             Boolean @default(false)


  @@map("Items")
}

model MasterItem {
  id                  String @id @default(uuid())
  name                String @unique
  imageUrl            String?

  category            String?

  approved            Boolean @default(true)

  @@map("MasterItems")
}

model Category {
  id                  String  @id @default(uuid())
  name                String  @unique
  item          Item[] //opposite relation to defaultCategory in MasterItem

  @@map("Categories")
}

