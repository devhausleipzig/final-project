datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lists   List[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model List {
  id                  String @id @default(uuid())
  listName            String?    @default("new list")
  createdAt           DateTime   @default(now())
  userIdentifier      String //entering correct listIdentifier will Link to user
  belongsTo           User @relation(fields: [userIdentifier], references: [id])
  
  favorite            Boolean?
  items               Item[] ///opposite relation to Items related to this List.
  @@map("Lists")
}

model Item {
  id                  String  @id @default(uuid())
  customName          String?
  createdAt           DateTime   @default(now())
  quantity            Float?
  unit                String?
  //entering correct listIdentifier will Link to a list
  listIdentifier      String?
  inList              List?   @relation(fields: [listIdentifier], references: [id])
  
  checked             Boolean?
  //this userItem is based on
  masterItemId        String?
  masterItem          MasterItem ? @relation(fields: [masterItemId], references: [id])
  customCategoryId    String?
  customCategory      Category? @relation(fields: [customCategoryId], references: [id])
  @@map("Items")
}

model MasterItem {
  id                  String @id @default(uuid())
  name                String @unique
  imageUrl            String?
  category            String?
  defaultCategory     Category? @relation(fields: [category], references: [name])
  approved            Boolean
  item                Item[] //opposite Relation
  @@map("MasterItems")
}

model Category {
  id                  String  @id @default(uuid())
  name                String  @unique
  masterItem          MasterItem[] //opposite relation to defaultCategory in MasterItem
  userItem            Item[] //opposite relation to customCategory in userItem
  @@map("Categories")
}
