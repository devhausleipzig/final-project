import { LargeButton } from "@/components/LargeButton";
import { GetServerSideProps, InferGetServerSidePropsType } from "next";
import Head from "next/head";
import { FiChevronLeft, FiUser } from "react-icons/fi";
import axios from "axios";
import { User } from "@prisma/client";
import { getSession, signOut } from "next-auth/react";
import { useRouter } from "next/router";
import Input from "@/components/Input";
import { useEffect, useState } from "react";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";

export type SettingsProps = {
	user: User;
};

export type UpdateNameResponse = {
	name: string;
	userId: string;
};
export default function Settings(props: SettingsProps) {
	const { data, isLoading } = useQuery(["useInfo"], () =>
		getUserInfo(props.user.email as string)
	);
	const queryClient = useQueryClient();

	const { mutate: refresh } = useMutation(getUserInfo, {
		onSuccess: () => {
			queryClient.invalidateQueries(["useInfo"]);
		},
	});

	const [inputName, setInputName] = useState("");

	function clickHandler() {
		updateName();
		refresh(props.user.email as string);
	}

	async function updateName() {
		const bla = await axios.patch("http://localhost:3000/api/changeNameUser", {
			userId: data?.id,
			name: inputName,
		});
		return bla;
	}

	const handleSignOut = () => {
		signOut({ redirect: true, callbackUrl: "/auth/signIn" });
	};
	const router = useRouter();
	const redirect = () => {
		router.push("/account/changeEmail");
	};

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div className="px-8 flex flex-col bg-grad-frame h-full">
				<header className="w-full flex items-center h-10 pt-8">
					<a href="">
						<FiChevronLeft size={28} />
					</a>
				</header>
				<div className="w-full flex-grow flex flex-col justify-around">
					<div className="flex bg-slate-400 w-full ">Account vs settings</div>
					<div className="flex w-full flex-col items-center gap-5">
						{/* This section will change depending on the account status of the User */}
						<div>
							<FiUser size={28} />
						</div>
						<div className="text-primary-default-Solid font-heading text-4xl">
							Hey,&nbsp;
							{data?.name ? data.name : data?.email}
						</div>
						<div className="w-full flex flex-col gap-5">
							<Input
								type={"New name"}
								name={inputName}
								setValue={setInputName}
								value={""}
								placeholder={"New name"}
								onClick={clickHandler}
							></Input>
							{/* <SmallButton label="Update" /> */}

							<LargeButton
								variant="primary"
								label="Change E-Mail"
								onClick={redirect}
								disabled={false}
							/>
							<LargeButton
								variant="secondary"
								label="Log-Out"
								onClick={handleSignOut}
								disabled={false}
							/>
							<></>
						</div>
					</div>
				</div>
			</div>
		</>
	);
}
const getUserInfo = async (email: string) => {
	const John: User = await axios
		.get(`http://localhost:3000/api/userInfo?email=${email}`)
		.then((res) => res.data);
	return John;
};

export const getServerSideProps: GetServerSideProps = async (context) => {
	const session = await getSession({ req: context.req });
	return {
		props: {
			user: session?.user,
		},
	};
};
